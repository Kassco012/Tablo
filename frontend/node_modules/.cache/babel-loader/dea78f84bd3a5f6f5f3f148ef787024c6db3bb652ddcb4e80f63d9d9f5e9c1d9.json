{"ast":null,"code":"// frontend/src/services/api.js\nimport axios from 'axios';\n\n// Получаем URL из переменной окружения или используем дефолтный\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\nconsole.log('%c🌐 API Configuration', 'color: #4CAF50; font-size: 14px; font-weight: bold;');\nconsole.log('API URL:', API_URL);\nconsole.log('Environment:', process.env.NODE_ENV);\n\n// Создаем экземпляр axios\nconst api = axios.create({\n  baseURL: API_URL,\n  timeout: 15000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Интерцептор для добавления токена к запросам\napi.interceptors.request.use(config => {\n  var _config$method;\n  const token = localStorage.getItem('token');\n  console.log('%c📤 API REQUEST', 'color: #2196F3; font-weight: bold;');\n  console.log('Method:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase());\n  console.log('URL:', `${config.baseURL}${config.url}`);\n  console.log('Headers:', config.headers);\n  console.log('Data:', config.data);\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n    console.log('✅ Token added:', token.substring(0, 20) + '...');\n  } else {\n    console.log('ℹ️ No token available');\n  }\n  return config;\n}, error => {\n  console.error('%c❌ REQUEST ERROR', 'color: #f44336; font-weight: bold;', error);\n  return Promise.reject(error);\n});\n\n// Интерцептор для обработки ответов\napi.interceptors.response.use(response => {\n  console.log('%c📥 API RESPONSE', 'color: #4CAF50; font-weight: bold;');\n  console.log('Status:', response.status);\n  console.log('URL:', response.config.url);\n  console.log('Data:', response.data);\n  return response;\n}, error => {\n  console.log('%c❌ API ERROR', 'color: #f44336; font-weight: bold;');\n  if (error.response) {\n    // Сервер ответил с кодом ошибки\n    const {\n      status,\n      data,\n      config\n    } = error.response;\n    console.log('Status Code:', status);\n    console.log('URL:', config.url);\n    console.log('Error Data:', data);\n    console.log('Full Response:', error.response);\n    switch (status) {\n      case 400:\n        console.log('❌ Bad Request - проверьте данные запроса');\n        break;\n      case 401:\n        console.log('❌ Unauthorized - неверные учетные данные или токен');\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        if (!window.location.pathname.includes('/login')) {\n          console.log('Redirecting to /login...');\n          window.location.href = '/login';\n        }\n        break;\n      case 403:\n        console.log('❌ Forbidden - недостаточно прав');\n        break;\n      case 404:\n        console.log('❌ Not Found - endpoint не существует');\n        break;\n      case 500:\n        console.log('❌ Server Error - ошибка на сервере');\n        break;\n      default:\n        console.log('❌ Unknown error status');\n    }\n  } else if (error.request) {\n    // Запрос был отправлен, но ответа не было\n    console.log('❌ No response from server');\n    console.log('Request:', error.request);\n    console.log('Possible reasons:');\n    console.log('  1. Backend is not running');\n    console.log('  2. CORS issue');\n    console.log('  3. Network error');\n    console.log('  4. Wrong API URL:', API_URL);\n  } else {\n    // Ошибка при настройке запроса\n    console.log('❌ Error setting up request');\n    console.log('Message:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// API методы\nconst apiService = {\n  // Health check\n  checkHealth: async () => {\n    try {\n      console.log('%c🏥 Health Check', 'color: #FF9800; font-weight: bold;');\n      const response = await api.get('/health');\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      console.error('Health check failed:', error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Авторизация\n  login: async (email, password) => {\n    try {\n      console.log('%c🔑 LOGIN ATTEMPT', 'color: #9C27B0; font-size: 14px; font-weight: bold;');\n      console.log('Email:', email);\n      console.log('Password length:', password.length);\n      console.log('API URL:', API_URL);\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      console.log('%c✅ LOGIN SUCCESS', 'color: #4CAF50; font-size: 14px; font-weight: bold;');\n      console.log('Response:', response.data);\n\n      // Сохраняем токен и данные пользователя\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n        console.log('Token saved:', response.data.token.substring(0, 20) + '...');\n        console.log('User saved:', response.data.user);\n      } else {\n        console.warn('⚠️ No token in response!');\n      }\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      console.log('%c❌ LOGIN FAILED', 'color: #f44336; font-size: 14px; font-weight: bold;');\n      let errorMessage = 'Ошибка авторизации';\n      if (error.response) {\n        var _error$response$data, _error$response$data2;\n        errorMessage = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.error) || `Ошибка ${error.response.status}`;\n        console.log('Server error message:', errorMessage);\n      } else if (error.request) {\n        errorMessage = 'Сервер недоступен. Проверьте подключение.';\n        console.log('Backend URL:', API_URL);\n        console.log('Is backend running?');\n      } else {\n        errorMessage = error.message;\n      }\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  },\n  // Выход\n  logout: () => {\n    console.log('%c👋 LOGOUT', 'color: #FF9800; font-weight: bold;');\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  },\n  // Получение данных dashboard\n  getDashboard: async () => {\n    try {\n      const response = await api.get('/dashboard');\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response, _error$response$data3;\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data3 = _error$response.data) === null || _error$response$data3 === void 0 ? void 0 : _error$response$data3.message) || 'Ошибка загрузки данных'\n      };\n    }\n  },\n  // Получение архива\n  getArchive: async (params = {}) => {\n    try {\n      const response = await api.get('/archive', {\n        params\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Ошибка загрузки архива'\n      };\n    }\n  },\n  // Универсальные методы\n  get: async (url, params = {}) => {\n    try {\n      const response = await api.get(url, {\n        params\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  post: async (url, data = {}) => {\n    try {\n      const response = await api.post(url, data);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  put: async (url, data = {}) => {\n    try {\n      const response = await api.put(url, data);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  delete: async url => {\n    try {\n      const response = await api.delete(url);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n};\nexport { api };\nexport default apiService;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","console","log","NODE_ENV","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","token","localStorage","getItem","method","toUpperCase","url","data","Authorization","substring","error","Promise","reject","response","status","removeItem","window","location","pathname","includes","href","message","apiService","checkHealth","get","success","login","email","password","length","post","setItem","JSON","stringify","user","warn","errorMessage","_error$response$data","_error$response$data2","logout","getDashboard","_error$response","_error$response$data3","getArchive","params","_error$response2","_error$response2$data","put","delete"],"sources":["C:/Users/kassymzhan.nuraliyev/OneDrive - KAZ Minerals Management LLP/Desktop/Tablo/Tablo/frontend/src/services/api.js"],"sourcesContent":["// frontend/src/services/api.js\r\nimport axios from 'axios';\r\n\r\n// Получаем URL из переменной окружения или используем дефолтный\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\r\n\r\nconsole.log('%c🌐 API Configuration', 'color: #4CAF50; font-size: 14px; font-weight: bold;');\r\nconsole.log('API URL:', API_URL);\r\nconsole.log('Environment:', process.env.NODE_ENV);\r\n\r\n// Создаем экземпляр axios\r\nconst api = axios.create({\r\n    baseURL: API_URL,\r\n    timeout: 15000,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// Интерцептор для добавления токена к запросам\r\napi.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem('token');\r\n\r\n        console.log('%c📤 API REQUEST', 'color: #2196F3; font-weight: bold;');\r\n        console.log('Method:', config.method?.toUpperCase());\r\n        console.log('URL:', `${config.baseURL}${config.url}`);\r\n        console.log('Headers:', config.headers);\r\n        console.log('Data:', config.data);\r\n\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n            console.log('✅ Token added:', token.substring(0, 20) + '...');\r\n        } else {\r\n            console.log('ℹ️ No token available');\r\n        }\r\n\r\n        return config;\r\n    },\r\n    (error) => {\r\n        console.error('%c❌ REQUEST ERROR', 'color: #f44336; font-weight: bold;', error);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Интерцептор для обработки ответов\r\napi.interceptors.response.use(\r\n    (response) => {\r\n        console.log('%c📥 API RESPONSE', 'color: #4CAF50; font-weight: bold;');\r\n        console.log('Status:', response.status);\r\n        console.log('URL:', response.config.url);\r\n        console.log('Data:', response.data);\r\n        return response;\r\n    },\r\n    (error) => {\r\n        console.log('%c❌ API ERROR', 'color: #f44336; font-weight: bold;');\r\n\r\n        if (error.response) {\r\n            // Сервер ответил с кодом ошибки\r\n            const { status, data, config } = error.response;\r\n\r\n            console.log('Status Code:', status);\r\n            console.log('URL:', config.url);\r\n            console.log('Error Data:', data);\r\n            console.log('Full Response:', error.response);\r\n\r\n            switch (status) {\r\n                case 400:\r\n                    console.log('❌ Bad Request - проверьте данные запроса');\r\n                    break;\r\n                case 401:\r\n                    console.log('❌ Unauthorized - неверные учетные данные или токен');\r\n                    localStorage.removeItem('token');\r\n                    localStorage.removeItem('user');\r\n\r\n                    if (!window.location.pathname.includes('/login')) {\r\n                        console.log('Redirecting to /login...');\r\n                        window.location.href = '/login';\r\n                    }\r\n                    break;\r\n                case 403:\r\n                    console.log('❌ Forbidden - недостаточно прав');\r\n                    break;\r\n                case 404:\r\n                    console.log('❌ Not Found - endpoint не существует');\r\n                    break;\r\n                case 500:\r\n                    console.log('❌ Server Error - ошибка на сервере');\r\n                    break;\r\n                default:\r\n                    console.log('❌ Unknown error status');\r\n            }\r\n        } else if (error.request) {\r\n            // Запрос был отправлен, но ответа не было\r\n            console.log('❌ No response from server');\r\n            console.log('Request:', error.request);\r\n            console.log('Possible reasons:');\r\n            console.log('  1. Backend is not running');\r\n            console.log('  2. CORS issue');\r\n            console.log('  3. Network error');\r\n            console.log('  4. Wrong API URL:', API_URL);\r\n        } else {\r\n            // Ошибка при настройке запроса\r\n            console.log('❌ Error setting up request');\r\n            console.log('Message:', error.message);\r\n        }\r\n\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// API методы\r\nconst apiService = {\r\n    // Health check\r\n    checkHealth: async () => {\r\n        try {\r\n            console.log('%c🏥 Health Check', 'color: #FF9800; font-weight: bold;');\r\n            const response = await api.get('/health');\r\n            return { success: true, data: response.data };\r\n        } catch (error) {\r\n            console.error('Health check failed:', error.message);\r\n            return { success: false, error: error.message };\r\n        }\r\n    },\r\n\r\n    // Авторизация\r\n    login: async (email, password) => {\r\n        try {\r\n            console.log('%c🔑 LOGIN ATTEMPT', 'color: #9C27B0; font-size: 14px; font-weight: bold;');\r\n            console.log('Email:', email);\r\n            console.log('Password length:', password.length);\r\n            console.log('API URL:', API_URL);\r\n\r\n            const response = await api.post('/auth/login', {\r\n                email,\r\n                password\r\n            });\r\n\r\n            console.log('%c✅ LOGIN SUCCESS', 'color: #4CAF50; font-size: 14px; font-weight: bold;');\r\n            console.log('Response:', response.data);\r\n\r\n            // Сохраняем токен и данные пользователя\r\n            if (response.data.token) {\r\n                localStorage.setItem('token', response.data.token);\r\n                localStorage.setItem('user', JSON.stringify(response.data.user));\r\n\r\n                console.log('Token saved:', response.data.token.substring(0, 20) + '...');\r\n                console.log('User saved:', response.data.user);\r\n            } else {\r\n                console.warn('⚠️ No token in response!');\r\n            }\r\n\r\n            return { success: true, data: response.data };\r\n        } catch (error) {\r\n            console.log('%c❌ LOGIN FAILED', 'color: #f44336; font-size: 14px; font-weight: bold;');\r\n\r\n            let errorMessage = 'Ошибка авторизации';\r\n\r\n            if (error.response) {\r\n                errorMessage = error.response.data?.message ||\r\n                    error.response.data?.error ||\r\n                    `Ошибка ${error.response.status}`;\r\n                console.log('Server error message:', errorMessage);\r\n            } else if (error.request) {\r\n                errorMessage = 'Сервер недоступен. Проверьте подключение.';\r\n                console.log('Backend URL:', API_URL);\r\n                console.log('Is backend running?');\r\n            } else {\r\n                errorMessage = error.message;\r\n            }\r\n\r\n            return {\r\n                success: false,\r\n                error: errorMessage\r\n            };\r\n        }\r\n    },\r\n\r\n    // Выход\r\n    logout: () => {\r\n        console.log('%c👋 LOGOUT', 'color: #FF9800; font-weight: bold;');\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n        window.location.href = '/login';\r\n    },\r\n\r\n    // Получение данных dashboard\r\n    getDashboard: async () => {\r\n        try {\r\n            const response = await api.get('/dashboard');\r\n            return { success: true, data: response.data };\r\n        } catch (error) {\r\n            return {\r\n                success: false,\r\n                error: error.response?.data?.message || 'Ошибка загрузки данных'\r\n            };\r\n        }\r\n    },\r\n\r\n    // Получение архива\r\n    getArchive: async (params = {}) => {\r\n        try {\r\n            const response = await api.get('/archive', { params });\r\n            return { success: true, data: response.data };\r\n        } catch (error) {\r\n            return {\r\n                success: false,\r\n                error: error.response?.data?.message || 'Ошибка загрузки архива'\r\n            };\r\n        }\r\n    },\r\n\r\n    // Универсальные методы\r\n    get: async (url, params = {}) => {\r\n        try {\r\n            const response = await api.get(url, { params });\r\n            return { success: true, data: response.data };\r\n        } catch (error) {\r\n            return { success: false, error: error.message };\r\n        }\r\n    },\r\n\r\n    post: async (url, data = {}) => {\r\n        try {\r\n            const response = await api.post(url, data);\r\n            return { success: true, data: response.data };\r\n        } catch (error) {\r\n            return { success: false, error: error.message };\r\n        }\r\n    },\r\n\r\n    put: async (url, data = {}) => {\r\n        try {\r\n            const response = await api.put(url, data);\r\n            return { success: true, data: response.data };\r\n        } catch (error) {\r\n            return { success: false, error: error.message };\r\n        }\r\n    },\r\n\r\n    delete: async (url) => {\r\n        try {\r\n            const response = await api.delete(url);\r\n            return { success: true, data: response.data };\r\n        } catch (error) {\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n};\r\n\r\nexport { api };\r\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}