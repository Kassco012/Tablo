{"ast":null,"code":"// frontend/src/services/api.js\nimport axios from 'axios';\n\n// Получаем URL из переменной окружения или используем дефолтный\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\nconsole.log('API URL configured:', API_URL);\n\n// Создаем экземпляр axios\nconst api = axios.create({\n  baseURL: API_URL,\n  timeout: 15000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Интерцептор для добавления токена к запросам\napi.interceptors.request.use(config => {\n  var _config$method;\n  // Получаем токен из localStorage\n  const token = localStorage.getItem('token');\n\n  // Логирование для отладки\n  console.log(`API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n    console.log('Token added to request');\n  } else {\n    console.log('No token available');\n  }\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Интерцептор для обработки ответов\napi.interceptors.response.use(response => {\n  console.log(`API Response: ${response.status} ${response.config.url}`, response.data);\n  return response;\n}, error => {\n  console.error('Response error:', error);\n  if (error.response) {\n    const {\n      status,\n      data\n    } = error.response;\n    console.log(`Error ${status}:`, data);\n\n    // Обработка различных статусов ошибок\n    switch (status) {\n      case 401:\n        console.log('Unauthorized - clearing token');\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n\n        // Редирект на login только если мы не на странице логина\n        if (!window.location.pathname.includes('/login')) {\n          window.location.href = '/login';\n        }\n        break;\n      case 403:\n        console.log('Forbidden - insufficient permissions');\n        break;\n      case 404:\n        console.log('Not found');\n        break;\n      case 500:\n        console.log('Server error');\n        break;\n      default:\n        console.log('Unknown error');\n    }\n  } else if (error.request) {\n    console.error('No response from server:', error.request);\n  } else {\n    console.error('Error setting up request:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// Публичные endpoints (не требуют авторизации)\nconst publicEndpoints = ['/health', '/auth/login', '/auth/register'];\n\n// API методы\nconst apiService = {\n  // Health check - не требует авторизации\n  checkHealth: async () => {\n    try {\n      const response = await api.get('/health');\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Авторизация\n  login: async (email, password) => {\n    try {\n      console.log('Attempting login for:', email);\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n\n      // Сохраняем токен и данные пользователя\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n        console.log('Login successful, token saved');\n      }\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Login failed:', error);\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Ошибка авторизации'\n      };\n    }\n  },\n  // Выход\n  logout: () => {\n    console.log('Logging out...');\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  },\n  // Получение данных dashboard\n  getDashboard: async () => {\n    try {\n      const response = await api.get('/dashboard');\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Ошибка загрузки данных'\n      };\n    }\n  },\n  // Получение архива\n  getArchive: async (params = {}) => {\n    try {\n      const response = await api.get('/archive', {\n        params\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      return {\n        success: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Ошибка загрузки архива'\n      };\n    }\n  },\n  // Универсальный метод для GET запросов\n  get: async (url, params = {}) => {\n    try {\n      const response = await api.get(url, {\n        params\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Универсальный метод для POST запросов\n  post: async (url, data = {}) => {\n    try {\n      const response = await api.post(url, data);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Универсальный метод для PUT запросов\n  put: async (url, data = {}) => {\n    try {\n      const response = await api.put(url, data);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Универсальный метод для DELETE запросов\n  delete: async url => {\n    try {\n      const response = await api.delete(url);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n};\n\n// Экспортируем и api instance и сервис\nexport { api };\nexport default apiService;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","console","log","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","token","localStorage","getItem","method","toUpperCase","url","Authorization","error","Promise","reject","response","status","data","removeItem","window","location","pathname","includes","href","message","publicEndpoints","apiService","checkHealth","get","success","login","email","password","post","setItem","JSON","stringify","user","_error$response","_error$response$data","logout","getDashboard","_error$response2","_error$response2$data","getArchive","params","_error$response3","_error$response3$data","put","delete"],"sources":["C:/Users/kassymzhan.nuraliyev/OneDrive - KAZ Minerals Management LLP/Desktop/Tablo/Tablo/frontend/src/services/api.js"],"sourcesContent":["// frontend/src/services/api.js\r\nimport axios from 'axios';\r\n\r\n// Получаем URL из переменной окружения или используем дефолтный\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\r\n\r\nconsole.log('API URL configured:', API_URL);\r\n\r\n// Создаем экземпляр axios\r\nconst api = axios.create({\r\n    baseURL: API_URL,\r\n    timeout: 15000,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// Интерцептор для добавления токена к запросам\r\napi.interceptors.request.use(\r\n    (config) => {\r\n        // Получаем токен из localStorage\r\n        const token = localStorage.getItem('token');\r\n\r\n        // Логирование для отладки\r\n        console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`);\r\n\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n            console.log('Token added to request');\r\n        } else {\r\n            console.log('No token available');\r\n        }\r\n\r\n        return config;\r\n    },\r\n    (error) => {\r\n        console.error('Request error:', error);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Интерцептор для обработки ответов\r\napi.interceptors.response.use(\r\n    (response) => {\r\n        console.log(`API Response: ${response.status} ${response.config.url}`, response.data);\r\n        return response;\r\n    },\r\n    (error) => {\r\n        console.error('Response error:', error);\r\n\r\n        if (error.response) {\r\n            const { status, data } = error.response;\r\n\r\n            console.log(`Error ${status}:`, data);\r\n\r\n            // Обработка различных статусов ошибок\r\n            switch (status) {\r\n                case 401:\r\n                    console.log('Unauthorized - clearing token');\r\n                    localStorage.removeItem('token');\r\n                    localStorage.removeItem('user');\r\n\r\n                    // Редирект на login только если мы не на странице логина\r\n                    if (!window.location.pathname.includes('/login')) {\r\n                        window.location.href = '/login';\r\n                    }\r\n                    break;\r\n\r\n                case 403:\r\n                    console.log('Forbidden - insufficient permissions');\r\n                    break;\r\n\r\n                case 404:\r\n                    console.log('Not found');\r\n                    break;\r\n\r\n                case 500:\r\n                    console.log('Server error');\r\n                    break;\r\n\r\n                default:\r\n                    console.log('Unknown error');\r\n            }\r\n        } else if (error.request) {\r\n            console.error('No response from server:', error.request);\r\n        } else {\r\n            console.error('Error setting up request:', error.message);\r\n        }\r\n\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Публичные endpoints (не требуют авторизации)\r\nconst publicEndpoints = ['/health', '/auth/login', '/auth/register'];\r\n\r\n// API методы\r\nconst apiService = {\r\n    // Health check - не требует авторизации\r\n    checkHealth: async () => {\r\n        try {\r\n            const response = await api.get('/health');\r\n            return { success: true, data: response.data };\r\n        } catch (error) {\r\n            return { success: false, error: error.message };\r\n        }\r\n    },\r\n\r\n    // Авторизация\r\n    login: async (email, password) => {\r\n        try {\r\n            console.log('Attempting login for:', email);\r\n            const response = await api.post('/auth/login', { email, password });\r\n\r\n            // Сохраняем токен и данные пользователя\r\n            if (response.data.token) {\r\n                localStorage.setItem('token', response.data.token);\r\n                localStorage.setItem('user', JSON.stringify(response.data.user));\r\n                console.log('Login successful, token saved');\r\n            }\r\n\r\n            return { success: true, data: response.data };\r\n        } catch (error) {\r\n            console.error('Login failed:', error);\r\n            return {\r\n                success: false,\r\n                error: error.response?.data?.message || 'Ошибка авторизации'\r\n            };\r\n        }\r\n    },\r\n\r\n    // Выход\r\n    logout: () => {\r\n        console.log('Logging out...');\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n        window.location.href = '/login';\r\n    },\r\n\r\n    // Получение данных dashboard\r\n    getDashboard: async () => {\r\n        try {\r\n            const response = await api.get('/dashboard');\r\n            return { success: true, data: response.data };\r\n        } catch (error) {\r\n            return {\r\n                success: false,\r\n                error: error.response?.data?.message || 'Ошибка загрузки данных'\r\n            };\r\n        }\r\n    },\r\n\r\n    // Получение архива\r\n    getArchive: async (params = {}) => {\r\n        try {\r\n            const response = await api.get('/archive', { params });\r\n            return { success: true, data: response.data };\r\n        } catch (error) {\r\n            return {\r\n                success: false,\r\n                error: error.response?.data?.message || 'Ошибка загрузки архива'\r\n            };\r\n        }\r\n    },\r\n\r\n    // Универсальный метод для GET запросов\r\n    get: async (url, params = {}) => {\r\n        try {\r\n            const response = await api.get(url, { params });\r\n            return { success: true, data: response.data };\r\n        } catch (error) {\r\n            return { success: false, error: error.message };\r\n        }\r\n    },\r\n\r\n    // Универсальный метод для POST запросов\r\n    post: async (url, data = {}) => {\r\n        try {\r\n            const response = await api.post(url, data);\r\n            return { success: true, data: response.data };\r\n        } catch (error) {\r\n            return { success: false, error: error.message };\r\n        }\r\n    },\r\n\r\n    // Универсальный метод для PUT запросов\r\n    put: async (url, data = {}) => {\r\n        try {\r\n            const response = await api.put(url, data);\r\n            return { success: true, data: response.data };\r\n        } catch (error) {\r\n            return { success: false, error: error.message };\r\n        }\r\n    },\r\n\r\n    // Универсальный метод для DELETE запросов\r\n    delete: async (url) => {\r\n        try {\r\n            const response = await api.delete(url);\r\n            return { success: true, data: response.data };\r\n        } catch (error) {\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n};\r\n\r\n// Экспортируем и api instance и сервис\r\nexport { api };\r\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}